import java.util.regex.Matcher
import java.util.regex.Pattern

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'dev.flutter.flutter-gradle-plugin'
    id 'com.google.gms.google-services'
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

android {
    compileSdkVersion flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = '11'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.finos.hdb"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-build-configuration.
        minSdkVersion 21
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the release keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }

        debug {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }

    flavorDimensions = ["fluttter_flavor_demo"]
    productFlavors {
        dev {
            dimension "fluttter_flavor_demo"
            resValue "string", "app_name", "base dev"
            versionNameSuffix ".dev"
        }
        prod {
            dimension "fluttter_flavor_demo"
            resValue "string", "app_name", "base Prod"
            versionNameSuffix ".prod"
        }
    }

    def flavor = getCurrentFlavor()
    if (flavor == "dev") {
        flutter.target "lib/flavors/main_dev.dart"
    } else {
        flutter.target "lib/flavors/main_prod.dart"
    }
}

def getCurrentFlavor() {
    String taskRequestsStr = gradle.startParameter.taskRequests.toString()
    Pattern pattern
    if (taskRequestsStr.contains("assemble")) {
        pattern = Pattern.compile("assemble(\\w+)(Release|Debug)")
    } else {
        pattern = Pattern.compile("bundle(\\w+)(Release|Debug)")
    }

    Matcher matcher = pattern.matcher(taskRequestsStr)
    String flavor
    if (matcher.find()) {
        flavor = matcher.group(1).toLowerCase()
    } else {
        print("NO FLAVOR FOUND")
        flavor = ""
    }
    return flavor
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.google.firebase:firebase-messaging:23.3.1'
}
